-- algebraic effects

effect ask! : () -> a

hal () =
    do
        "Hello " ++ perform ask! () ++ ". How are you doing" ++ perform ask! () ++ "?"
    handle
      | ask!  -> yield "Dave"


trait State s where

    effect get! : State s -> s
    effect set! : State s -> s -> ()


-- state is implicit
counter! () =
    do
        let
            i = perform get!
        in
            if i <= 0 then ()
            else
             println! "hi";
             perform set! (i - 1);
             counter! ()
    handle
        | get! (State x) -> resume State x with x
        | set! _ with y -> resume State y with () -- could omits context

test () =
    perform counter! with (State 2)


-- fetch! probably is async operation
async_get_data () =
    do
        perform "we need data" ()
    handle
        | "we need data" _ -> resume _ with fetch! "data source"
        -- alternative:
        -- |  "we need data" ->  fetch! "data source" |> yield


log! : String -> String -> ()


test_log warning_condition message =
    do
        perform "info" "function begins"
        if warning_condition then
            perform "warn" message
        else
            perform "info" message

    handle
        | "info" with msg -> log! "info" msg ; resume -- context ommited
        | "warn" with msg -> log! "warn" msg ; resume


type DivByZero = DivByZero derive (Effect)

-- handler handle_state =
--    | get! (State x) -> resume State x with x
--    | set! _ with y -> resume State y with () -- could omits context


-- if divide by zero print an error message and returns 0
div x y =
   do
        let
            divisor = perform counter! with (State 2)
        in
            if y /= 0 then
                 x / y
            else
                perform DivByZero
   handle
    | DivByZero -> println! "division by zero" ; yield 0 -- equivalent to resume context with 0
    | handle_state


-- alebraic effects general form:
--
-- perform <effect> args [with initial_context]
--
-- to handle:
--
--  do {effects} handle | <effect> [<context>] [with args] -> <actions>
-- <actions> : <expression> | yield <expression> | resume [<new_context>] [with <expression>]
--
-- to declare
--
-- effect : <function-prototype>
--
-- type T = .. derive Effect
--
-- handlers:
--
--    handler name
--      { | <effect> [<context>] [with args] -> <actions> }
--
