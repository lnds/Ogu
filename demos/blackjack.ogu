
barajar = shuffle! [(valor, palo) | palo <- ['\u2665', '\u2666', '\u2663', '\u2660'], valor <- ['A' , 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K']]

valor-carta ('A', _) = 1
valor-carta ('J', _) = 10
valor-carta ('Q', _) = 10
valor-carta ('K', _) = 10
valor-carta (n,   _) = n

valor-mano? mano
   | ases && (valor + 10) <= 21 = valor + 10
   | otherwise = valor
   where
        valor = mano |> map valor-carta |> sum
        ases  = mano |> filter \(v, p) -> v == 'A' |> not-empty?

solicitar-jugada! jugada =
   for opcion = solicitar-opcion mensaje loop
     if elem opcion opciones then
       opcion
     else
       do
         println! "opción incorrecta"
         repeat let opcion = solicitar-opcion mensaje
  where
    solicitar-opcion mensaje = first <| char-array <| trim <| upper <| prompt! mensaje
    mensaje | jugada == 'I' = "\nJugada? ('R':Retirarse, 'D':Doblar, 'O':Otra carta, 'M': Mantener cartas) --> "
            | otherwise     = "\nJugada? ('R':Retirarse, 'O':Otra carta, 'M': Mantener cartas) --> "
    opciones | jugada == 'I' = ['R', 'D', 'O', 'M']
             | otherwise     = ['R', 'O', 'M']


mostrar-manos! mano-jugador mano-croupier = do
    println! " "
    mostrar-mano! "Cartas Jugador:  " mano-jugador
    mostrar-mano! "Cartas Couprier: " mano-croupier
  where
    mostrar-mano! mensaje mano = println! "\t" mensaje mano  "( Valor: "  (valor-mano? mano) " )"

determinar-ganancia mano-jugador mano-croupier apuesta jugada
  | jugada == 'R' = (- apuesta)
  | jugada == 'D' = 2 * ganancia
  | otherwise = ganancia
  where
    (jugador, croupier) = (valor-mano? mano-jugador, valor-mano? mano-croupier)
    ganancia = if (croupier <= 21 && jugador > 21) || (jugador < croupier && croupier <= 21)  then (- apuesta) else apuesta

jugar-mano! baraja-revuelta apuesta pozo =
    do
        println! f"\nNueva mano, apuesta $ ${apuesta}  pozo $ " (pozo - apuesta)
        let
            mano-jugador = take 2 baraja-revuelta
            mano-croupier = take 2 (drop 2 baraja-revuelta)
            baraja = drop 4 baraja-revuelta
            jugada = 'I'
        in if (valor-mano? @mano-jugador) == 21 then
             do
                mostrar-manos! @mano-jugador @mano-croupier
                println! "\nJugador tiene black jack!"
                (3 * apuesta) / 2
            else
              do
                let (mano-jugador, mano-croupier) = jugar-mano! jugada mano-jugador mano-croupier baraja
                in
                    mostrar-manos! mano-jugador mano-croupier;
                    determinar-ganancia mano-jugador mano-croupier apuesta jugada
    where
       jugar-mano! jugada mano-jugador mano-croupier baraja =
          if not (contains jugada ['I', 'O']) then
             (mano-jugador, mano-croupier)
          else
            do
                mostrar-manos! mano-jugador mano-croupier
                let
                   nueva-jugada = solicitar-jugada! jugada
                in
                  if nueva-jugada == 'M' then
                    for nueva-baraja = baraja, nueva-mano-croupier = mano-croupier
                    while (valor-mano? mano-croupier) < 17
                    loop
                       repeat let nueva-mano-croupier = (head nueva-baraja) :: nueva-mano-croupier,
                              let nueva-baraja = tail baraja
                    return
                        jugar-mano! nueva-jugada mano-jugador nueva-mano-croupier nueva-baraja

                  elif jugada == 'D' then
                    for
                        nueva-mano-jugador = (head baraja) :: mano-jugador
                        nueva-baraja = tail baraja
                        nueva-mano-croupier = mano-croupier
                    while (valor-mano? mano-croupier) < 17
                    loop
                        repeat
                            let nuevamano-croupier = (head nueva-baraja) :: nueva-mano-croupier,
                            let nueva-baraja = tail nueva-baraja
                    return
                        jugar-mano! jugada nueva-mano-jugador nueva-mano-croupier nueva-baraja
                  elif jugada == 'O' then
                    let
                      nueva-mano-jugador = (head baraja) :: mano-jugador
                      nueva-baraja = tail baraja
                    in
                      if (valor-mano? mano-jugador) > 21 then
                         jugar-mano! 'R' nueva-mano-jugador mano-croupier nueva-baraja
                      else
                        jugar-mano! jugada nueva-mano-jugador mano-croupier nueva-baraja
                  else
                    println! "fail"

mostrar-resultado! resultado pozo
    | resultado > 0 = println! f"\nJugador gana $ ${resultado}\nSu pozo es: $ ${pozo}"
    | resultado < 0 = println! f"\nJugador pierde $ ${resultado}\nSu pozo es: $ ${pozo}"
    | otherwise     = println! f"\nEmpate\nSu pozo es: ${pozo}"


-- solicitar-apuesta! : Int -> Int -> Int
solicitar-apuesta pozo apuesta-minima =
  if pozo < apuesta-minima then
    do
       println! "su pozo no le alcanza para seguir jugando, inténtelo en otra oportunidad"
       pozo
  else
    obtener-apuesta $ read-int! msj
  where
    obtener-apuesta valor =
      if valor == 0 || (apuesta-minima <= valor && valor <= pozo) then
        valor
      else
        obtener-apuesta $ read-int! msj

    msj = f"\nIngrese su apuesta (min: ${apuesta-minima}, max: ${pozo}, 0 para finalizar juego): "
    ask! m = prompt! m >| to-int -1
    read-int! m = for value = ask! m while value < 0 loop  repeat let value = ask! m return value

-- Programa principal

apuesta-minima = 10
pozo-inicial = 500

-- main : Int -> Int -> ()
main pozo apuesta = do
  println! "Bienvenido al juego de black jack"
  if apuesta < apuesta-minima || pozo < apuesta-minima then
    println! "Gracias por participar, su pozo final es: " pozo
  else
    let
       resultado = jugar-mano! (barajar) apuesta pozo
       nuevo-pozo = pozo + resultado
    in
      do
        mostrar-resultado! resultado (pozo + resultado)
        main nuevo-pozo (solicitar-apuesta! nuevo-pozo apuesta-minima)

main () =
    main! pozo (solicitar-apuesta pozo-inicial apuesta-minima)
