fn primes n =
  let root = n |> Math.sqrt |> int
  let sieve = boolean-array n true
  for i in [2 ..< root ] loop
    when sieve @ i then
      with j = i * 2 while j < n loop
        do
          set sieve @ j = false
          repeat j + i
  filter (\i -> sieve @ i) [2 .. n - 1]

fn calc-limit n = (int (n * logsum)) + 3
  where log = Math.log n
        loglog = Math.log log
        logsum = log + loglog

def nth-prime 1 = 2
def nth-prime 2 = 3
def nth-prime n = calc-limit n |> primes |> take n |> last

println! <| nth-prime 10001
