module Shapes exposing (Shape, Widget, Circle, Rectangle, show-area!)

trait Shape where

    area : Shape -> Number

trait Widget where

     draw! : Shape -> ()

     move! : Shape -> Number -> Number -> Shape

trait Origin where

     get-x : Origin -> Number

     get-y : Origin -> Number

type Circle = Circle (x : Number, y: Number, radius : Number)

  extends Shape where

       area self = pi * (self.radius ^ 2)

  extends Widget where

      draw! self = println! "draw a circle at (" x ", " y ") with radius " radius

      move! self new-x new-y =
         Circle(new-x, new-y, self.radius)

  extends Origin where

      get-x self = x

      get-y self = y


class Rectangle (x: Number,  y: Number, width: Number, height: Number)


extends Rectangle with Shape where

     area self = self.width * self.height

extends Rectangle with Widget
where
     draw! self do println! "draw a rectangle at (" self.x  ", " self.y   ") with width = " (.width self) " and height = " (.height self)

     move! self new-x new-y =
        new-rect = Rectangle(new-x, new-y, self.width, self.height)
        draw! new-rect
        return new-rect

show-area! : Rectangle -> ()
show-area! shape do println! "el area de un rectangulo es " (area shape) " y es de tipo " (typeof shape )

show-area! : Shape -> ()
show-area! shape do println! "el area es " (area shape) " y es de tipo " (typeof shape )


cir = Circle(10, 10, 10)
rec = Rectangle(0,0, 100, 50)

draw! cir

draw! rec

show-area! cir

show-area! rec

cir = move! cir 20 20

println! (get-x cir) (get-y cir) cir.radius

