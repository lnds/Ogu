module Shapes exposing (Shape, Widget, Circle, Rectangle, show-area!)

trait Shape where

    area : Shape -> Number

trait Widget where

     draw! : Shape -> ()

     move! : Shape -> Number -> Number -> Shape

trait Origin where

     get-x : Origin -> Number

     get-y : Origin -> Number

type Circle = Circle {x : Number, y: Number, radius : Number}

   derive Shape where

       area self = pi * (self.radius ^ 2)

   derive Widget where

      draw! self = println! "draw a circle at (" x ", " y ") with radius " radius

      move! self new-x new-y =
         Circle { x = new-x, y = new-y, radius = self.radius}

   derive Origin where

      get-x self = x

      get-y self = y


type Rectangle = Rectangle {x: Number,  y: Number, width: Number, height: Number}


extends Rectangle with Shape where

     area self = self.width * self.height

extends Rectangle with Widget
where
     draw! self =
        println! "draw a rectangle at (" self.x  ", " self.y   ") with width = " (self.width) " and height = " (self.height)

     move! self new-x new-y =
        let
            new-rect = Rectangle(new-x, new-y, self.width, self.height)
        in
            draw! new-rect;
            new-rect

show-area! : Rectangle -> ()
show-area! shape = println! "el area de un rectangulo es " (area shape) " y es de tipo " (typeof shape )

show-area! : Shape -> ()
show-area! shape = println! "el area es " (area shape) " y es de tipo " (typeof shape )


cir = Circle{x = 10, y = 10, radius = 10}
rec = Rectangle(0,0, 100, 50)

main () =
    draw! cir;

    draw! rec;

    show-area! cir;

    show-area! rec;

    let cir = move! cir 20 20
    in
        println! (get-x cir) (get-y cir) cir.radius

