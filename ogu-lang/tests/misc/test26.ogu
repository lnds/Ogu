trait Shape
where
    area : Shape -> Int

    move! : Shape -> Int -> Int -> ()

trait Draw
where

    show! : Draw -> ()

type Circle = Circle {x: Float,  y: Float, radius: Float}

   derive Shape where

       area self = pi * (radius ^ 2)

       move! self x y =
            println! "move to " x y

   derive Draw where
        show! this = println! "this circle is at " this.x "," this.y " with radius = " this.radius


type Rectangle = Rectangle {x: Float, y: Float, width: Float, height: Float}

extends Rectangle with Shape

    where
        area self = (self.width) * (self.height)


type Triangle = Triangle {b: Float, h: Float}

    derive Shape
    where
        area self = self.b * self.h



test-area : Rectangle -> ()
test-area shape  = str "area of rectangle: " (area shape)

test-area : Shape -> ()
test-area shape = str  "area of shape: "  (area shape)

cir = Circle(10, 10, 10)
rec = Rectangle(0,0, 100, 50)
tri = Triangle(10, 20)

main () = do
    println! cir.x cir.y cir.radius

    [test-area cir, test-area rec, test-area tri]
