trait Shape
where
    area : Shape -> Int

    move! : Shape -> Int -> Int -> ()

trait Draw
where

    show! : Draw -> ()

class Circle(x,  y, radius)

   extends Shape
   where

       area self = pi * (radius ^ 2)

       move! self x y =
            println! "move to " x y

   extends Draw
   where
        show! this = println! "this circle is at " this.x "," this.y " with radius = " this.radius


class Rectangle(x, y, width, height)

extends Rectangle with Shape

    where
        area self = (.width self) * (.height self)


class Triangle(b, h)

    extends Shape
    where
        area self = self.b * self.h



test-area : Rectangle -> ()
test-area shape  = str "area of rectangle: " (area shape)

test-area : Shape -> ()
test-area shape = str  "area of shape: "  (area shape)

cir = Circle(10, 10, 10)
rec = Rectangle(0,0, 100, 50)
tri = Triangle(10, 20)

println! cir.x cir.y cir.radius

[test-area cir, test-area rec, test-area tri]
